*TreeFiddyGit*    A git worktree plugin for neovim

==============================================================================
1. Contents                                                        *TreeFiddyGit-contents*

    1. Introduction |TreeFiddyGit-introduction|
    2. Installation |TreeFiddyGit-installation|
    3. Usage |TreeFiddyGit-usage|
    4. Configuration |TreeFiddyGit-configuration|

==============================================================================
2. Introduction                                                *TreeFiddyGit-introduction*

TreeFiddyGit is a Neovim plugin designed to make managing git worktrees as
seamless as using regular branches. It aims to simplify your workflow by
providing a 1:1 relationship between branches and worktrees. This means that
every branch you create or check out will exist in its own worktree, giving
you an isolated environment for each branch.

==============================================================================
3. Installation                                               *TreeFiddyGit-installation*

You can install TreeFiddyGit using various package managers. Below are
instructions for some common ones:

### LazyVim
To install with LazyVim, add the following to your LazyVim configuration:
    ```lua
    return {
        "DarkBones/TreeFiddyGit",
        dependencies = {
            "nvim-telescope/telescope.nvim",
        },
        config = function()
            require("TreeFiddyGit").setup()
        end,
    }
    ```

### Packer
To install with Packer, add the following to your `init.lua` or `plugins.lua`:
    ```lua
    use {
        "DarkBones/TreeFiddyGit",
        requires = { "nvim-telescope/telescope.nvim" },
        config = function()
            require("TreeFiddyGit").setup()
        end,
    }
    ```

### Vim-Plug
To install with Vim-Plug, add the following to your `init.vim`:
    ```vim
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'DarkBones/TreeFiddyGit'

    lua << EOF
    require("TreeFiddyGit").setup()
    EOF
    ```

==============================================================================
4. Usage                                                       *TreeFiddyGit-usage*

- `:Telescope tree_fiddy_git get_worktrees` 
  List and switch between worktrees.

- `:Telescope tree_fiddy_git create_worktree` 
  Create a new worktree and switch to it.

- `:Telescope tree_fiddy_git create_worktree_stash` 
  Stash current changes, create a new worktree, switch to the new worktree, 
  and apply the stashed changes.

- `:lua require('TreeFiddyGit').checkout_branch()`
  Checkout a (remote) branch in a new worktree.

You can delete a worktree by bringing up the telescope window with 
`:Telescope tree_fiddy_git get_worktrees` and pressing `C-d` on the 
highlighted tree.

These commands can be mapped to your preferred keybindings.

==============================================================================
5. Hooks                                                       *TreeFiddyGit-hooks*

TreeFiddyGit provides a robust hooks system that allows you to execute custom
functionality before and after key actions. Hooks are called with two
parameters: `action` and `data`.

- **`action`**: A string representing the action that just occurred.
- **`data`**: Additional data related to the action (details vary by action).

The available action values are:

- `pre-checkout` 
  Before checking out a branch.

- `post-checkout` 
  After checking out a branch.

- `pre-create` 
  Before creating a new worktree.

- `post-create` 
  After creating a new worktree.

- `pre-move` 
  Before moving to an existing worktree.

- `post-move` 
  After moving to an existing worktree.

- `pre-delete` 
  Before deleting a worktree.

- `post-delete` 
  After deleting a worktree.

- `create.pre-move` 
  Before moving to the new worktree right after creating it.

- `create.post-move` 
  After moving to the new worktree right after creating it.

- `checkout.create.pre-move` 
  Before moving to the new worktree right after checking out a branch.

- `checkout.create.post-move` 
  After moving to the new worktree right after checking out a branch.

### Example Hook
Here’s an example of how you can set up a hook in the plugin configuration:
    ```lua
    require("TreeFiddyGit").setup({
        hook = function(action, data)
            if action == "post-create" then
                print("A new worktree has been created: " .. data.path)
            elseif action == "pre-checkout" then
                print("About to check out branch: " .. data.new_branch)
            end
        end,
    })
    ```

This setup will print a message whenever a new worktree is created or a branch
is about to be checked out. You can customize the `hook` function to suit your
specific needs.

==============================================================================
6. Remote Branch Configuration                                *TreeFiddyGit-remote*

If you need to pull remote branches, make sure to add the following line to
the `[remote "origin"]` section of your Git configuration:
    ```ini
    fetch = +refs/heads/*:refs/remotes/origin/*
    ```

Here’s an example configuration file:
    ```ini
    [core]
        repositoryformatversion = 0
        filemode = true
        bare = true
        ignorecase = true
        precomposeunicode = true


    [remote "origin"]
        url = git@github.com:username/repo.git
        fetch = +refs/heads/*:refs/remotes/origin/*


    [branch "main"]
        remote = origin
        merge = refs/heads/main
    ```

This ensures that all branches are fetched from the remote repository,
allowing you to work seamlessly with TreeFiddyGit.
